//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/VRControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRControls"",
    ""maps"": [
        {
            ""name"": ""VR"",
            ""id"": ""65d00bab-2cc4-41e7-b8f4-25d3e3e51570"",
            ""actions"": [
                {
                    ""name"": ""LeftTriggerPressed"",
                    ""type"": ""Button"",
                    ""id"": ""1d6d984f-ea7b-4f0f-8f6f-f838311fce6e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightTriggerPressed"",
                    ""type"": ""Button"",
                    ""id"": ""4e7f27d5-f92f-4690-ab9d-d7b41fd8a8b9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftGripPressed"",
                    ""type"": ""Button"",
                    ""id"": ""accd2642-ea4f-409f-86a8-e40db9510a78"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightGripPressed"",
                    ""type"": ""Button"",
                    ""id"": ""56e386a3-e275-4d96-874e-db851e658fd5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftButtonX"",
                    ""type"": ""Button"",
                    ""id"": ""6110a669-bd33-495c-b3f9-990e06d4cf38"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightButtonA"",
                    ""type"": ""Button"",
                    ""id"": ""ff015245-bf55-4a26-ad3d-6c7efb05ae78"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMenu"",
                    ""type"": ""Button"",
                    ""id"": ""a7083e5a-6f52-4fa5-a136-7de24e0f3039"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f1412e4a-8b99-4be1-bc5e-d2ba940b4c6d"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTriggerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48b2b340-66c4-4f5f-b545-8b3c8c3bfd4b"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTriggerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d78faf76-34be-4faa-80fd-02b53853a0be"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftGripPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d0dc200-deb3-47ed-97f0-0e441c5df5be"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightGripPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a950189-0d56-48fe-9cad-13e12cb97442"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftButtonX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""135d5418-51a2-4194-9ee4-9d03f1527489"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightButtonA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f507b62e-ad4b-453e-914f-fff169b21ad5"",
                    ""path"": ""<XRController>{LeftHand}/{MenuButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VR
        m_VR = asset.FindActionMap("VR", throwIfNotFound: true);
        m_VR_LeftTriggerPressed = m_VR.FindAction("LeftTriggerPressed", throwIfNotFound: true);
        m_VR_RightTriggerPressed = m_VR.FindAction("RightTriggerPressed", throwIfNotFound: true);
        m_VR_LeftGripPressed = m_VR.FindAction("LeftGripPressed", throwIfNotFound: true);
        m_VR_RightGripPressed = m_VR.FindAction("RightGripPressed", throwIfNotFound: true);
        m_VR_LeftButtonX = m_VR.FindAction("LeftButtonX", throwIfNotFound: true);
        m_VR_RightButtonA = m_VR.FindAction("RightButtonA", throwIfNotFound: true);
        m_VR_LeftMenu = m_VR.FindAction("LeftMenu", throwIfNotFound: true);
    }

    ~@VRControls()
    {
        UnityEngine.Debug.Assert(!m_VR.enabled, "This will cause a leak and performance issues, VRControls.VR.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VR
    private readonly InputActionMap m_VR;
    private List<IVRActions> m_VRActionsCallbackInterfaces = new List<IVRActions>();
    private readonly InputAction m_VR_LeftTriggerPressed;
    private readonly InputAction m_VR_RightTriggerPressed;
    private readonly InputAction m_VR_LeftGripPressed;
    private readonly InputAction m_VR_RightGripPressed;
    private readonly InputAction m_VR_LeftButtonX;
    private readonly InputAction m_VR_RightButtonA;
    private readonly InputAction m_VR_LeftMenu;
    public struct VRActions
    {
        private @VRControls m_Wrapper;
        public VRActions(@VRControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftTriggerPressed => m_Wrapper.m_VR_LeftTriggerPressed;
        public InputAction @RightTriggerPressed => m_Wrapper.m_VR_RightTriggerPressed;
        public InputAction @LeftGripPressed => m_Wrapper.m_VR_LeftGripPressed;
        public InputAction @RightGripPressed => m_Wrapper.m_VR_RightGripPressed;
        public InputAction @LeftButtonX => m_Wrapper.m_VR_LeftButtonX;
        public InputAction @RightButtonA => m_Wrapper.m_VR_RightButtonA;
        public InputAction @LeftMenu => m_Wrapper.m_VR_LeftMenu;
        public InputActionMap Get() { return m_Wrapper.m_VR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRActions set) { return set.Get(); }
        public void AddCallbacks(IVRActions instance)
        {
            if (instance == null || m_Wrapper.m_VRActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VRActionsCallbackInterfaces.Add(instance);
            @LeftTriggerPressed.started += instance.OnLeftTriggerPressed;
            @LeftTriggerPressed.performed += instance.OnLeftTriggerPressed;
            @LeftTriggerPressed.canceled += instance.OnLeftTriggerPressed;
            @RightTriggerPressed.started += instance.OnRightTriggerPressed;
            @RightTriggerPressed.performed += instance.OnRightTriggerPressed;
            @RightTriggerPressed.canceled += instance.OnRightTriggerPressed;
            @LeftGripPressed.started += instance.OnLeftGripPressed;
            @LeftGripPressed.performed += instance.OnLeftGripPressed;
            @LeftGripPressed.canceled += instance.OnLeftGripPressed;
            @RightGripPressed.started += instance.OnRightGripPressed;
            @RightGripPressed.performed += instance.OnRightGripPressed;
            @RightGripPressed.canceled += instance.OnRightGripPressed;
            @LeftButtonX.started += instance.OnLeftButtonX;
            @LeftButtonX.performed += instance.OnLeftButtonX;
            @LeftButtonX.canceled += instance.OnLeftButtonX;
            @RightButtonA.started += instance.OnRightButtonA;
            @RightButtonA.performed += instance.OnRightButtonA;
            @RightButtonA.canceled += instance.OnRightButtonA;
            @LeftMenu.started += instance.OnLeftMenu;
            @LeftMenu.performed += instance.OnLeftMenu;
            @LeftMenu.canceled += instance.OnLeftMenu;
        }

        private void UnregisterCallbacks(IVRActions instance)
        {
            @LeftTriggerPressed.started -= instance.OnLeftTriggerPressed;
            @LeftTriggerPressed.performed -= instance.OnLeftTriggerPressed;
            @LeftTriggerPressed.canceled -= instance.OnLeftTriggerPressed;
            @RightTriggerPressed.started -= instance.OnRightTriggerPressed;
            @RightTriggerPressed.performed -= instance.OnRightTriggerPressed;
            @RightTriggerPressed.canceled -= instance.OnRightTriggerPressed;
            @LeftGripPressed.started -= instance.OnLeftGripPressed;
            @LeftGripPressed.performed -= instance.OnLeftGripPressed;
            @LeftGripPressed.canceled -= instance.OnLeftGripPressed;
            @RightGripPressed.started -= instance.OnRightGripPressed;
            @RightGripPressed.performed -= instance.OnRightGripPressed;
            @RightGripPressed.canceled -= instance.OnRightGripPressed;
            @LeftButtonX.started -= instance.OnLeftButtonX;
            @LeftButtonX.performed -= instance.OnLeftButtonX;
            @LeftButtonX.canceled -= instance.OnLeftButtonX;
            @RightButtonA.started -= instance.OnRightButtonA;
            @RightButtonA.performed -= instance.OnRightButtonA;
            @RightButtonA.canceled -= instance.OnRightButtonA;
            @LeftMenu.started -= instance.OnLeftMenu;
            @LeftMenu.performed -= instance.OnLeftMenu;
            @LeftMenu.canceled -= instance.OnLeftMenu;
        }

        public void RemoveCallbacks(IVRActions instance)
        {
            if (m_Wrapper.m_VRActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVRActions instance)
        {
            foreach (var item in m_Wrapper.m_VRActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VRActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VRActions @VR => new VRActions(this);
    public interface IVRActions
    {
        void OnLeftTriggerPressed(InputAction.CallbackContext context);
        void OnRightTriggerPressed(InputAction.CallbackContext context);
        void OnLeftGripPressed(InputAction.CallbackContext context);
        void OnRightGripPressed(InputAction.CallbackContext context);
        void OnLeftButtonX(InputAction.CallbackContext context);
        void OnRightButtonA(InputAction.CallbackContext context);
        void OnLeftMenu(InputAction.CallbackContext context);
    }
}
